-- ¡ELIMINAR LAS TABLAS SI YA EXISTEN!
DROP TABLE IF EXISTS ROLES;
DROP TABLE IF EXISTS SITES;
DROP TABLE IF EXISTS BANKS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS EMPLOYEES;
DROP TABLE IF EXISTS PERIODS;
DROP TABLE IF EXISTS STATES;
DROP TABLE IF EXISTS PAYROLLS;
DROP TABLE IF EXISTS PAYROLL_DETAIL;
DROP TABLE IF EXISTS CONSOLIDATED_PAYROLL;
DROP TABLE IF EXISTS BLACKLISTED_TOKENS;

-- ¡CREAR LA TABLA ROLES!
CREATE TABLE ROLES (
    RID SERIAL PRIMARY KEY,
    ROLENAME VARCHAR(50) NOT NULL UNIQUE CHECK (ROLENAME IN ('ADMIN', 'COORDINATOR', 'EMPLOYEE', 'ACCOUNT_NUMBER', 'INTERNAL_CONTROL'))
);

-- ¡CREAR LA TABLA SEDES!
CREATE TABLE SITES (
    SID SERIAL PRIMARY KEY,
    SITENAME VARCHAR(100) NOT NULL UNIQUE CHECK (SITENAME IN ('Apartado', 'Caucasia', 'Monteria', 'Oficina Central', 'Team 1', 'Team 2', 'Team 3'))
);

-- ¡CREAR LA TABLA BANCOS!
CREATE TABLE BANKS (
    BID SERIAL PRIMARY KEY,
    BANKNAME VARCHAR(100) NOT NULL UNIQUE CHECK (BANKNAME IN ('Bancolombia', 'Banco de Bogotá', 'BBVA', 'Davivienda', 'Nequi'))
);

-- CREAR TABLA PERIODOS!
CREATE TABLE PERIODS (
    PID SERIAL PRIMARY KEY,
    PERIODTIME VARCHAR(20) NOT NULL UNIQUE CHECK (PERIODTIME IN ('Corte 1', 'Corte 2'))
);

-- CREAR TABLA ESTADOS!
CREATE TABLE STATES (
    SID SERIAL PRIMARY KEY,
    STATENAME VARCHAR(30) NOT NULL UNIQUE CHECK (STATENAME IN ('En Revisión', 'Corrección', 'Validado'))
);

-- ¡CREAR LA TABLA USUARIOS!
CREATE TABLE USERS (
    UID SERIAL PRIMARY KEY,
    USERNAME VARCHAR(20) NOT NULL,
    LASTNAME VARCHAR(20) NOT NULL,
    CC VARCHAR(12) NOT NULL UNIQUE,
    SITE_ID INT NOT NULL,
    FOREIGN KEY (SITE_ID) REFERENCES SITES(SID),
    EMAIL VARCHAR(100) UNIQUE,
    PASSWORD VARCHAR(60),
    ROLE_ID INT NOT NULL DEFAULT 3,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(RID)    
);

-- ¡CREAR LA TABLA EMPLEADOS!
CREATE TABLE EMPLOYEES (
    EID SERIAL PRIMARY KEY,
    USER_ID INT NOT NULL UNIQUE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(UID) ON DELETE CASCADE,
    BANK_ID INT NOT NULL,
    FOREIGN KEY (BANK_ID) REFERENCES BANKS(BID),
    ACCOUNT_NUMBER VARCHAR(20) NOT NULL,
    SITE_ID INT NOT NULL,
    FOREIGN KEY (SITE_ID) REFERENCES SITES(SID),
    MONTHLY_SALARY DECIMAL(10,2) NOT NULL
);

-- ¡CREAR LA TABLA NÓMINAS!
CREATE TABLE PAYROLLS (
    PID SERIAL PRIMARY KEY,
    COORDINATOR_ID INT NOT NULL,
    FOREIGN KEY (COORDINATOR_ID) REFERENCES USERS(UID) ON DELETE CASCADE,
    COORDINATOR_NAME VARCHAR(100),
    SITE_ID INT NOT NULL,
    FOREIGN KEY (SITE_ID) REFERENCES SITES(SID) ON DELETE CASCADE,
    SITE_NAME VARCHAR(100),
    PERIOD_ID INT NOT NULL,
    FOREIGN KEY (PERIOD_ID) REFERENCES PERIODS(PID),
    PERIOD_NAME VARCHAR(50),
    STATE_ID INT NOT NULL DEFAULT 1,
    FOREIGN KEY (STATE_ID) REFERENCES STATES(SID),
    STATE_NAME VARCHAR(50),
    COMMENTS TEXT,
    PAYROLL_DATE DATE DEFAULT CURRENT_DATE NOT NULL
);

-- ¡CREAR LA TABLA DETALLES DE LAS NÓMINAS!
CREATE TABLE PAYROLL_DETAIL (
    PDID SERIAL PRIMARY KEY,
    PAYROLL_ID INT NOT NULL,
    FOREIGN KEY (PAYROLL_ID) REFERENCES PAYROLLS(PID) ON DELETE CASCADE,
    EMPLOYEE_ID INT NOT NULL,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EID) ON DELETE CASCADE,
    BIWEEKLY_SALARY DECIMAL(10,2) NOT NULL,
    DAY_SALARY DECIMAL(10,2) NOT NULL,
    DAYS_WORKED INT NOT NULL CHECK (DAYS_WORKED >= 0 AND DAYS_WORKED <= 15),
    SUNDAY_CLASSES INT NOT NULL,
    VALUE_SUNDAY_CLASSES DECIMAL(10, 2) NOT NULL,
    DAYS_SUNDAY INT NOT NULL,
    VALUE_DAYS_SUNDAY DECIMAL(10, 2) NOT NULL,
    INSTRUCTOR_HOURS INT NOT NULL,
    VALUE_INSTRUCTOR_HOURS DECIMAL(10, 2) NOT NULL,
    REGISTRATIONS INT NOT NULL,
    VALUE_REGISTRATIONS DECIMAL(10, 2) NOT NULL,
    TOTAL_SALARY DECIMAL(10,2),
    TOTAL_SUNDAY_CLASESS DECIMAL(10,2) NOT NULL,
    TOTAL_SUNDAY_DAYS DECIMAL(10,2) NOT NULL,
    TOTAL_CLASS_INSTRUCTOR DECIMAL(10,2) NOT NULL,
    TOTAL_COMMISSION_REGISTRATIONS DECIMAL(10,2) NOT NULL,
    ADDITIONAL_PAYMENTS DECIMAL(10,2),
    DEDUCTIONS DECIMAL(10,2) NOT NULL,
    TOTAL_PAYABLE DECIMAL(10,2) NOT NULL,
    OBSERVATIONS TEXT DEFAULT 'Sin Observaciones.'
);

CREATE TABLE CONSOLIDATED_PAYROLL (
    CPID SERIAL PRIMARY KEY,
    PERIOD_ID INT,
    FOREIGN KEY (PERIOD_ID) REFERENCES PERIODS(PID),
    SITE_ID INT,
    FOREIGN KEY (SITE_ID) REFERENCES SITES(SID),
    TOTAL_SALARIES DECIMAL (10, 2),
    TOTAL_COMMISSIONS DECIMAL(10,2),
    TOTAL_DEDUCTIONS DECIMAL(10,2),
    TOTAL_PAYABLE DECIMAL(10,2)
);

CREATE TABLE BLACKLISTED_TOKENS (
  BTID SERIAL PRIMARY KEY,
  TOKEN VARCHAR(500) NOT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- Insertar Roles
INSERT INTO ROLES (ROLENAME) VALUES ('ADMIN');
INSERT INTO ROLES (ROLENAME) VALUES ('COORDINATOR');
INSERT INTO ROLES (ROLENAME) VALUES ('EMPLOYEE');
INSERT INTO ROLES (ROLENAME) VALUES ('ACCOUNT_NUMBER');
INSERT INTO ROLES (ROLENAME) VALUES ('INTERNAL_CONTROL');

-- Insertar Sitios
INSERT INTO SITES (SITENAME) VALUES ('Apartado');
INSERT INTO SITES (SITENAME) VALUES ('Caucacia');
INSERT INTO SITES (SITENAME) VALUES ('Monteria');
INSERT INTO SITES (SITENAME) VALUES ('Oficina Central');
INSERT INTO SITES (SITENAME) VALUES ('Team 1');
INSERT INTO SITES (SITENAME) VALUES ('Team 2');
INSERT INTO SITES (SITENAME) VALUES ('Team 3');

-- Insertar Bancos
INSERT INTO BANKS (BANKNAME) VALUES ('Bancolombia');
INSERT INTO BANKS (BANKNAME) VALUES ('Banco de Bogotá');
INSERT INTO BANKS (BANKNAME) VALUES ('BBVA');
INSERT INTO BANKS (BANKNAME) VALUES ('Davivienda');
INSERT INTO BANKS (BANKNAME) VALUES ('Nequi');

-- Insertar Períodos
INSERT INTO PERIODS (PERIODTIME) VALUES ('Corte 1');
INSERT INTO PERIODS (PERIODTIME) VALUES ('Corte 2');

-- Insertar Estados
INSERT INTO STATES (STATENAME) VALUES ('En Revisión');
INSERT INTO STATES (STATENAME) VALUES ('Corrección');
INSERT INTO STATES (STATENAME) VALUES ('Validado');



-- Crear la función de cálculo de nómina
CREATE FUNCTION calculate_payroll_detail()
RETURNS TRIGGER AS $$
BEGIN
    -- Calcular BIWEEKLY_SALARY y DAY_SALARY
    NEW.BIWEEKLY_SALARY := (SELECT MONTHLY_SALARY FROM EMPLOYEES WHERE EID = NEW.EMPLOYEE_ID) / 2;
    NEW.DAY_SALARY := (SELECT MONTHLY_SALARY FROM EMPLOYEES WHERE EID = NEW.EMPLOYEE_ID) / 30;

    -- Calcular TOTAL_SALARY
    NEW.TOTAL_SALARY := NEW.DAYS_WORKED * NEW.DAY_SALARY;

    -- Calcular TOTAL_SUNDAY_CLASSES
    NEW.TOTAL_SUNDAY_CLASESS := NEW.SUNDAY_CLASSES * NEW.VALUE_SUNDAY_CLASSES;

    -- Calcular TOTAL_SUNDAY_DAYS
    NEW.TOTAL_SUNDAY_DAYS := NEW.DAYS_SUNDAY * NEW.VALUE_DAYS_SUNDAY;

    -- Calcular TOTAL_CLASS_INSTRUCTOR
    NEW.TOTAL_CLASS_INSTRUCTOR := NEW.INSTRUCTOR_HOURS * NEW.VALUE_INSTRUCTOR_HOURS;

    -- Calcular TOTAL_COMMISSION_REGISTRATIONS
    NEW.TOTAL_COMMISSION_REGISTRATIONS := NEW.REGISTRATIONS * NEW.VALUE_REGISTRATIONS;

    -- Calcular TOTAL_PAYABLE
    NEW.TOTAL_PAYABLE := NEW.TOTAL_SALARY + NEW.TOTAL_SUNDAY_CLASESS + NEW.TOTAL_SUNDAY_DAYS 
                        + NEW.TOTAL_CLASS_INSTRUCTOR + NEW.TOTAL_COMMISSION_REGISTRATIONS 
                        + COALESCE(NEW.ADDITIONAL_PAYMENTS, 0) - COALESCE(NEW.DEDUCTIONS, 0);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;




-- Crear trigger para la tabla PAYROLL_DETAIL
CREATE TRIGGER trg_calculate_payroll_detail
BEFORE INSERT OR UPDATE ON PAYROLL_DETAIL
FOR EACH ROW
EXECUTE FUNCTION calculate_payroll_detail();


-- // --------------------------------------------\\ --
-- Crear la función de buscar el nombre por SID para asignar en el campo SITE_ID
CREATE OR REPLACE FUNCTION update_site_name()
RETURNS TRIGGER AS $$
BEGIN
    -- Buscar el nombre de la sede correspondiente al SITE_ID
    SELECT SITENAME INTO NEW.SITE_NAME
    FROM SITES
    WHERE SID = NEW.SITE_ID;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear trigger asignar el nombre de la sede por ID
CREATE TRIGGER set_site_name
BEFORE INSERT OR UPDATE ON PAYROLLS
FOR EACH ROW
EXECUTE FUNCTION update_site_name();




-- // --------------------------------------------\\ --
-- Crear la función de buscar el nombre por SID para asignar en el campo SITE_ID
CREATE OR REPLACE FUNCTION update_period_name()
RETURNS TRIGGER AS $$
BEGIN
    -- Buscar el nombre de la sede correspondiente al SITE_ID
    SELECT PERIODTIME INTO NEW.PERIOD_NAME
    FROM PERIODS
    WHERE PID = NEW.PERIOD_ID;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear trigger asignar el nombre de la sede por ID
CREATE TRIGGER set_period_name
BEFORE INSERT OR UPDATE ON PAYROLLS
FOR EACH ROW
EXECUTE FUNCTION update_period_name();




-- // --------------------------------------------\\ --
-- Crear la función de buscar el nombre por SID para asignar en el campo SITE_ID
CREATE OR REPLACE FUNCTION update_state_name()
RETURNS TRIGGER AS $$
BEGIN
    -- Buscar el nombre de la sede correspondiente al SITE_ID
    SELECT STATENAME INTO NEW.STATE_NAME
    FROM STATES
    WHERE SID = NEW.STATE_ID;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear trigger asignar el nombre de la sede por ID
CREATE TRIGGER set_state_name
BEFORE INSERT OR UPDATE ON PAYROLLS
FOR EACH ROW
EXECUTE FUNCTION update_state_name();




-- // --------------------------------------------\\ --
-- Crear la función de buscar el nombre por SID para asignar en el campo SITE_ID
CREATE OR REPLACE FUNCTION update_coordinator_name()
RETURNS TRIGGER AS $$
BEGIN
    -- Buscar el nombre de la sede correspondiente al SITE_ID
    SELECT USERNAME INTO NEW.COORDINATOR_NAME
    FROM USERS
    WHERE UID = NEW.COORDINATOR_ID;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear trigger asignar el nombre de la sede por ID
CREATE TRIGGER set_coordinator_name
BEFORE INSERT OR UPDATE ON PAYROLLS
FOR EACH ROW
EXECUTE FUNCTION update_coordinator_name();



-- PERIODO ACTUAL DE LA NÓMINA ---

-- Determina el periodo actual basado en la fecha
SELECT
    CASE
        WHEN EXTRACT(DAY FROM CURRENT_DATE) IN (1, 2, 3, 4, 5) THEN 'Corte 1'
        WHEN EXTRACT(DAY FROM CURRENT_DATE) IN (15, 16, 17, 18, 19, 28, 29, 30, 31) THEN 'Corte 2'
        ELSE NULL
    END AS periodo_actual;